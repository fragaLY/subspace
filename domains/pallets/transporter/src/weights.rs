
//! Autogenerated weights for pallet_transporter
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// executor
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_transporter
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./domains/pallets/transporter/src/weights.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_transporter.
pub trait WeightInfo {
	fn transfer() -> Weight;
	fn message() -> Weight;
	fn message_response() -> Weight;
}

/// Weights for pallet_transporter using the Substrate node and recommended hardware.
#[derive(Debug)]
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Messenger NextChannelId (r:1 w:0)
	/// Proof Skipped: Messenger NextChannelId (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger Channels (r:1 w:1)
	/// Proof Skipped: Messenger Channels (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger CounterForOutbox (r:1 w:1)
	/// Proof: Messenger CounterForOutbox (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Messenger Outbox (r:1 w:1)
	/// Proof Skipped: Messenger Outbox (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger Relayers (r:1 w:0)
	/// Proof Skipped: Messenger Relayers (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Messenger NextRelayerIdx (r:1 w:1)
	/// Proof Skipped: Messenger NextRelayerIdx (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Messenger RelayerMessages (r:1 w:1)
	/// Proof Skipped: Messenger RelayerMessages (max_values: None, max_size: None, mode: Measured)
	/// Storage: Transporter OutgoingTransfers (r:0 w:1)
	/// Proof Skipped: Transporter OutgoingTransfers (max_values: None, max_size: None, mode: Measured)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `498`
		//  Estimated: `25398`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(60_000_000, 25398)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3593`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Transporter OutgoingTransfers (r:1 w:1)
	/// Proof Skipped: Transporter OutgoingTransfers (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn message_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `7302`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 7302)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Messenger NextChannelId (r:1 w:0)
	/// Proof Skipped: Messenger NextChannelId (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger Channels (r:1 w:1)
	/// Proof Skipped: Messenger Channels (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger CounterForOutbox (r:1 w:1)
	/// Proof: Messenger CounterForOutbox (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Messenger Outbox (r:1 w:1)
	/// Proof Skipped: Messenger Outbox (max_values: None, max_size: None, mode: Measured)
	/// Storage: Messenger Relayers (r:1 w:0)
	/// Proof Skipped: Messenger Relayers (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Messenger NextRelayerIdx (r:1 w:1)
	/// Proof Skipped: Messenger NextRelayerIdx (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Messenger RelayerMessages (r:1 w:1)
	/// Proof Skipped: Messenger RelayerMessages (max_values: None, max_size: None, mode: Measured)
	/// Storage: Transporter OutgoingTransfers (r:0 w:1)
	/// Proof Skipped: Transporter OutgoingTransfers (max_values: None, max_size: None, mode: Measured)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `498`
		//  Estimated: `25398`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(60_000_000, 25398)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(7_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3593`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3593)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: Transporter OutgoingTransfers (r:1 w:1)
	/// Proof Skipped: Transporter OutgoingTransfers (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn message_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `7302`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_000_000, 7302)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
}
